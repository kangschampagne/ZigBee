###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.40338/W32 for 8051         18/Jan/2016  13:05:10 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ  #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\Source\Sa #
#                          mpleApp.c                                          #
#    Command line       =  -f "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ #
#                          5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZSt #
#                          ack-2.5.1a\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"          #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ #
#                          5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZSt #
#                          ack-2.5.1a\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"         #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\Kangschampagne\De #
#                          sktop\prog\CC2530\µÚ5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.Î #
#                          ÂÊª¶È´«¸ÐÆ÷DHT11\ZStack-2.5.1a\Projects\zstack\Sam #
#                          ples\SampleApp\Source\SampleApp.c" -D ZTOOL_P1 -D  #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC "C:\Users\Kangschampagne\D #
#                          esktop\prog\CC2530\µÚ5ÕÂ                           #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\List\" -lA                           #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \CoordinatorEB\List\" --diag_suppress Pe001,Pa010  #
#                          -o "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ #
#                          5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZSt #
#                          ack-2.5.1a\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\CoordinatorEB\Obj\" -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ #
#                          5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZSt #
#                          ack-2.5.1a\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\" -I "C:\Users\Kangschampagne\Desktop\prog\CC2 #
#                          530\µÚ5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT #
#                          11\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\Source\" -I                           #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\ZMain\TI2530DB\" -I                      #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\hal\include\" -I        #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\hal\target\CC2530EB\"   #
#                          -I "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ #
#                          5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZSt #
#                          ack-2.5.1a\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\include\" -I     #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\mac\high_level\" -I     #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\mac\low_level\srf04\"   #
#                          -I "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ #
#                          5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZSt #
#                          ack-2.5.1a\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\low_level\srf04\ #
#                          single_chip\" -I "C:\Users\Kangschampagne\Desktop\ #
#                          prog\CC2530\µÚ5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´ #
#                          «¸ÐÆ÷DHT11\ZStack-2.5.1a\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\Components\mt\"   #
#                          -I "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ #
#                          5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZSt #
#                          ack-2.5.1a\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\Components\osal\include\" -I    #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\services\saddr\" -I     #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\services\sdata\" -I     #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\stack\af\" -I           #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\stack\nwk\" -I          #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\stack\sapi\" -I         #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\stack\sec\" -I          #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\stack\sys\" -I          #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\stack\zdo\" -I          #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\zmac\" -I               #
#                          "C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\zmac\f8w\" -Ohz         #
#                          --require_prototypes                               #
#    List file          =  C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ  #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\List\SampleApp.lst                   #
#    Object file        =  C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ  #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\Obj\SampleApp.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Kangschampagne\Desktop\prog\CC2530\µÚ5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "DHT11.h"
     78          
     79          
     80          /*********************************************************************
     81           * MACROS
     82           */
     83          
     84          /*********************************************************************
     85           * CONSTANTS
     86           */
     87          
     88          /*********************************************************************
     89           * TYPEDEFS
     90           */
     91          
     92          /*********************************************************************
     93           * GLOBAL VARIABLES
     94           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     95          uint8 AppTitle[] = "ALD2530 DHT11"; //Ó¦ÓÃ³ÌÐòÃû³Æ
   \                     AppTitle:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for AppTitle>`
   \   00000E                REQUIRE __INIT_XDATA_I
     96          
     97          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     98          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
     99          {
    100            SAMPLEAPP_PERIODIC_CLUSTERID,
    101            SAMPLEAPP_FLASH_CLUSTERID,
    102            SAMPLEAPP_P2P_CLUSTERID
    103          };
    104          

   \                                 In  segment XDATA_ROM_C, align 1
    105          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    106          {
    107            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    108            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    109            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    110            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    111            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    112            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    113            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    114            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    115            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    116          };
    117          
    118          // This is the Endpoint/Interface description.  It is defined here, but
    119          // filled-in in SampleApp_Init().  Another way to go would be to fill
    120          // in the structure here and make it a "const" (in code space).  The
    121          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    123          
    124          /*********************************************************************
    125           * EXTERNAL VARIABLES
    126           */
    127          
    128          /*********************************************************************
    129           * EXTERNAL FUNCTIONS
    130           */
    131          
    132          /*********************************************************************
    133           * LOCAL VARIABLES
    134           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136                                    // This variable will be received when
    137                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    150          
    151          /*********************************************************************
    152           * LOCAL FUNCTIONS
    153           */
    154          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    155          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    156          void SampleApp_SendPeriodicMessage( void );
    157          void SampleApp_SendFlashMessage( uint16 flashTime );
    158          void SampleApp_Send_P2P_Message(void);
    159          /*********************************************************************
    160           * NETWORK LAYER CALLBACKS
    161           */
    162          
    163          /*********************************************************************
    164           * PUBLIC FUNCTIONS
    165           */
    166          
    167          /*********************************************************************
    168           * @fn      SampleApp_Init
    169           *
    170           * @brief   Initialization function for the Generic App Task.
    171           *          This is called during initialization and should contain
    172           *          any application specific initialization (ie. hardware
    173           *          initialization/setup, table initialization, power up
    174           *          notificaiton ... ).
    175           *
    176           * @param   task_id - the ID assigned by OSAL.  This ID should be
    177           *                    used to send messages and set timers.
    178           *
    179           * @return  none
    180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    182          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    183            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    184            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    185            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    186            
    187            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    188            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    189            P0SEL &= 0x7f;                  //P0_7ÅäÖÃ³ÉÍ¨ÓÃio
   \   00001E   53F37F       ANL     0xf3,#0x7f
    190            
    191            // Device hardware initialization can be added here or in main() (Zmain.c).
    192            // If the hardware is application specific - add it here.
    193            // If the hardware is other parts of the device add it in main().
    194          
    195           #if defined ( BUILD_ALL_DEVICES )
    196            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    197            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    198            // together - if they are - we will start up a coordinator. Otherwise,
    199            // the device will start as a router.
    200            if ( readCoordinatorJumper() )
    201              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    202            else
    203              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    204          #endif // BUILD_ALL_DEVICES
    205          
    206          #if defined ( HOLD_AUTO_START )
    207            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    208            //  from starting the device and wait for the application to
    209            //  start the device.
    210            ZDOInitDevice(0);
    211          #endif
    212          
    213            // Setup for the periodic message's destination address
    214            // Broadcast to everyone
    215            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000024   740F         MOV     A,#0xf
   \   000026   F0           MOVX    @DPTR,A
    216            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000027   A3           INC     DPTR
   \   000028   7414         MOV     A,#0x14
   \   00002A   F0           MOVX    @DPTR,A
    217            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
    218          
    219            // Setup for the flash command's destination address - Group 1
    220            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000033   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
    221            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000039   A3           INC     DPTR
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    222            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    223            
    224            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000046   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000049   7402         MOV     A,#0x2
   \   00004B   F0           MOVX    @DPTR,A
    225            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   00004C   A3           INC     DPTR
   \   00004D   7414         MOV     A,#0x14
   \   00004F   F0           MOVX    @DPTR,A
    226            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   000050   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   F0           MOVX    @DPTR,A
    227          
    228            // Fill out the endpoint description.
    229            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000057   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    230            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00005D   A3           INC     DPTR
   \   00005E   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000064   F0           MOVX    @DPTR,A
    231            SampleApp_epDesc.simpleDesc
    232                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006C   F0           MOVX    @DPTR,A
    233            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00006D   A3           INC     DPTR
   \   00006E   E4           CLR     A
   \   00006F   F0           MOVX    @DPTR,A
    234          
    235            // Register the endpoint description with the AF
    236            afRegister( &SampleApp_epDesc );
   \   000070                ; Setup parameters for call to function afRegister
   \   000070   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000072   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000074   12....       LCALL   ??afRegister?relay
    237          
    238            // Register for all key events - This app will handle all key events
    239            RegisterForKeys( SampleApp_TaskID );
   \   000077                ; Setup parameters for call to function RegisterForKeys
   \   000077   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ??RegisterForKeys?relay
    240          
    241            // By default, all devices start out in Group 1
    242            SampleApp_Group.ID = 0x0001;
   \   00007F   90....       MOV     DPTR,#SampleApp_Group
   \   000082   7401         MOV     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
    243            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008B   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00008E   F5..         MOV     ?V0 + 2,A
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000095   7C07         MOV     R4,#0x7
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009B   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00009D   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
    244            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A3                ; Setup parameters for call to function aps_AddGroup
   \   0000A3   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A5   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A7   7914         MOV     R1,#0x14
   \   0000A9   12....       LCALL   ??aps_AddGroup?relay
    245          
    246          #if defined ( LCD_SUPPORTED )
    247            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000AC                ; Setup parameters for call to function HalLcdWriteString
   \   0000AC   7900         MOV     R1,#0x0
   \   0000AE   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B0   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B2   12....       LCALL   ??HalLcdWriteString?relay
    248          #endif
    249          }
   \   0000B5                REQUIRE ?Subroutine0
   \   0000B5                REQUIRE P0SEL
   \   0000B5                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    250          
    251          /*********************************************************************
    252           * @fn      SampleApp_ProcessEvent
    253           *
    254           * @brief   Generic Application Task event processor.  This function
    255           *          is called to process all events for the task.  Events
    256           *          include timers, messages and any other user defined events.
    257           *
    258           * @param   task_id  - The OSAL assigned task ID.
    259           * @param   events - events to process.  This is a bit map and can
    260           *                   contain more than one event.
    261           *
    262           * @return  none
    263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    265          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    266            afIncomingMSGPacket_t *MSGpkt;
    267            (void)task_id;  // Intentionally unreferenced parameter
    268          
    269            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    270            {
    271              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    272              while ( MSGpkt )
    273              {
    274                switch ( MSGpkt->hdr.event )
    275                {
    276                  // Received when a key is pressed
    277                  case KEY_CHANGE:
    278                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    279                    break;
    280          
    281                  // Received when a messages is received (OTA) for this endpoint
    282                  case AF_INCOMING_MSG_CMD:
    283                    SampleApp_MessageMSGCB( MSGpkt );
    284                    break;
    285          
    286                  // Received whenever the device changes state in the network
    287                  case ZDO_STATE_CHANGE:
    288                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    289                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    290                           (SampleApp_NwkState == DEV_ROUTER)
    291                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    292                    {
    293                      // Start sending the periodic message in a regular interval.
    294                      osal_start_timerEx( SampleApp_TaskID,
    295                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    296                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CD0         MOV     R4,#-0x30
   \   000020   7D07         MOV     R5,#0x7
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    297                    }
    298                    else
    299                    {
    300                      // Device is no longer in the network
    301                    }
    302                    break;
    303          
    304                  default:
    305                    break;
    306                }
    307          
    308                // Release the memory
    309                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    310          
    311                // Next - if one is available
    312                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    313              }
    314          
    315              // return unprocessed events
    316              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    317            }
    318          
    319            // Send a message out - This event is generated by a timer
    320            //  (setup in SampleApp_Init()).
    321            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    322            {
    323              // Send the periodic message
    324              //SampleApp_SendPeriodicMessage();
    325              SampleApp_Send_P2P_Message();
   \   000086                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000086   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    326          
    327              // Setup to send message again in normal period (+ a little jitter)
    328              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    329                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24D0         ADD     A,#-0x30
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3407         ADDC    A,#0x7
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    330          
    331              // return unprocessed events
    332              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    333            }
    334          
    335            // Discard unknown events
    336            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    337          }
    338          
    339          /*********************************************************************
    340           * Event Generation Functions
    341           */
    342          /*********************************************************************
    343           * @fn      SampleApp_HandleKeys
    344           *
    345           * @brief   Handles all key events for this device.
    346           *
    347           * @param   shift - true if in shift/alt.
    348           * @param   keys - bit field for key events. Valid entries:
    349           *                 HAL_KEY_SW_2
    350           *                 HAL_KEY_SW_1
    351           *
    352           * @return  none
    353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    354          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    355          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    356            (void)shift;  // Intentionally unreferenced parameter
    357            
    358            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    359            {
    360              /* This key sends the Flash Command is sent to Group 1.
    361               * This device will not receive the Flash Command from this
    362               * device (even if it belongs to group 1).
    363               */
    364              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    365            }
    366          
    367            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    368            {
    369              /* The Flashr Command is sent to Group 1.
    370               * This key toggles this device in and out of group 1.
    371               * If this device doesn't belong to group 1, this application
    372               * will not receive the Flash command sent to group 1.
    373               */
    374              aps_Group_t *grp;
    375              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    376              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    377              {
    378                // Remove from the group
    379                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    380              }
    381              else
    382              {
    383                // Add to the flash group
    384                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    385              }
    386            }
    387          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP    ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    388          
    389          /*********************************************************************
    390           * LOCAL FUNCTIONS
    391           */
    392          
    393          /*********************************************************************
    394           * @fn      SampleApp_MessageMSGCB
    395           *
    396           * @brief   Data message processor callback.  This function processes
    397           *          any incoming data - probably from other devices.  So, based
    398           *          on cluster ID, perform the intended action.
    399           *
    400           * @param   none
    401           *
    402           * @return  none
    403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    404          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    405          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    406            uint16 flashTime;
    407          
    408            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0200         DW        2
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    409            {
    410              case SAMPLEAPP_P2P_CLUSTERID:
    411                HalUARTWrite(0, "T&H:", 4);       //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
   \                     ??SampleApp_MessageMSGCB_2:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C04         MOV     R4,#0x4
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   00002C   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??HalUARTWrite?relay
    412                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   EE           MOV     A,R6
   \   000034   2420         ADD     A,#0x20
   \   000036   F582         MOV     DPL,A
   \   000038   EF           MOV     A,R7
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FC           MOV     R4,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FD           MOV     R5,A
   \   000042   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000045   FA           MOV     R2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ?Subroutine2 & 0xFFFF
    413                HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ÐÐ
    414                break;    
   \                     ??CrossCallReturnLabel_0:
   \   00004C   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_1:
   \   00004E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000051   F8           MOV     R0,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055                ; Setup parameters for call to function HalLedBlink
   \   000055   8882         MOV     DPL,R0
   \   000057   8983         MOV     DPH,R1
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FA           MOV     R2,A
   \   00005C   8882         MOV     DPL,R0
   \   00005E   8983         MOV     DPH,R1
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   EA           MOV     A,R2
   \   000065   2400         ADD     A,#0x0
   \   000067   F5..         MOV     ?V0 + 0,A
   \   000069   E4           CLR     A
   \   00006A   39           ADDC    A,R1
   \   00006B   F5..         MOV     ?V0 + 1,A
   \   00006D   7402         MOV     A,#0x2
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?US_SHR
   \   000074   AC..         MOV     R4,?V0 + 0
   \   000076   AD..         MOV     R5,?V0 + 1
   \   000078   7B32         MOV     R3,#0x32
   \   00007A   7A04         MOV     R2,#0x4
   \   00007C   7908         MOV     R1,#0x8
    415              case SAMPLEAPP_PERIODIC_CLUSTERID:
    416                break;
    417          
    418              case SAMPLEAPP_FLASH_CLUSTERID:
    419                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    420                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   00007E   12....       LCALL   ??HalLedBlink?relay
    421                break;
    422            }
    423          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000081   02....       LJMP    ??Subroutine5_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET
    424          
    425          /*********************************************************************
    426           * @fn      SampleApp_SendPeriodicMessage
    427           *
    428           * @brief   Send the periodic message.
    429           *
    430           * @param   none
    431           *
    432           * @return  none
    433           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    435          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    436            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    437                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    438                                 1,
    439                                 (uint8*)&SampleAppPeriodicCounter,
    440                                 &SampleApp_TransID,
    441                                 AF_DISCV_ROUTE,
    442                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   02....       LJMP    ?Subroutine1 & 0xFFFF
    443            {
    444            }
    445            else
    446            {
    447              // Error occurred in request to send.
    448            }
    449          }
    450          
    451          /*********************************************************************
    452           * @fn      SampleApp_SendFlashMessage
    453           *
    454           * @brief   Send the flash message to group 1.
    455           *
    456           * @param   flashTime - in milliseconds
    457           *
    458           * @return  none
    459           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    460          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    461          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    462            uint8 buffer[3];
    463            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    464            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    465            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    466          
    467            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    468                                 SAMPLEAPP_FLASH_CLUSTERID,
    469                                 3,
    470                                 buffer,
    471                                 &SampleApp_TransID,
    472                                 AF_DISCV_ROUTE,
    473                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    474            {
    475            }
    476            else
    477            {
    478              // Error occurred in request to send.
    479            }
    480          }
   \   000071   7403         MOV     A,#0x3
   \   000073   02....       LJMP    ?Subroutine1 & 0xFFFF
    481          
    482          /*********************************************************************
    483           * @fn      SampleApp_Send_P2P_Message
    484           *
    485           * @brief   point to point.
    486           *
    487           * @param   none
    488           *
    489           * @return  none
    490           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    491          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    492          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    493            char temp[3], humidity[3], strTemp[7];
    494          
    495            DHT11();             //»ñÈ¡ÎÂÊª¶È
   \   00000A                ; Setup parameters for call to function DHT11
   \   00000A   12....       LCALL   ??DHT11?relay
    496          
    497            //½«ÎÂÊª¶ÈµÄ×ª»»³É×Ö·û´®,¹©LCDÏÔÊ¾  
    498            temp[0] = wendu_shi+0x30;
   \   00000D   90....       MOV     DPTR,#wendu_shi
   \   000010   E0           MOVX    A,@DPTR
   \   000011   2430         ADD     A,#0x30
   \   000013   C0E0         PUSH    A
   \   000015   7403         MOV     A,#0x3
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
    499            temp[1] = wendu_ge+0x30;
   \   00001D   90....       MOV     DPTR,#wendu_ge
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2430         ADD     A,#0x30
   \   000023   C0E0         PUSH    A
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
    500            temp[2] = '\0';
   \   00002D   7405         MOV     A,#0x5
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    501            humidity[0] = shidu_shi+0x30;
   \   000034   90....       MOV     DPTR,#shidu_shi
   \   000037   E0           MOVX    A,@DPTR
   \   000038   2430         ADD     A,#0x30
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   F0           MOVX    @DPTR,A
    502            humidity[1] = shidu_ge+0x30;
   \   000041   90....       MOV     DPTR,#shidu_ge
   \   000044   E0           MOVX    A,@DPTR
   \   000045   2430         ADD     A,#0x30
   \   000047   C0E0         PUSH    A
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   D0E0         POP     A
   \   000050   F0           MOVX    @DPTR,A
    503            humidity[2] = '\0';
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
    504            //½«Êý¾ÝÕûºÏºó·½±ã·¢¸øÐ­µ÷Æ÷ÏÔÊ¾
    505            osal_memcpy(strTemp, temp, 2); 
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   7403         MOV     A,#0x3
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   A982         MOV     R1,DPL
   \   00005F   AA83         MOV     R2,DPH
   \   000061   89..         MOV     ?V0 + 0,R1
   \   000063   8A..         MOV     ?V0 + 1,R2
   \   000065   75..00       MOV     ?V0 + 2,#0x0
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006D   7C02         MOV     R4,#0x2
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   7409         MOV     A,#0x9
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
    506            osal_memcpy(&strTemp[2], "  ", 2);
   \   00007C                ; Setup parameters for call to function osal_memcpy
   \   00007C   75....       MOV     ?V0 + 0,#`?<Constant "  ">` & 0xff
   \   00007F   75....       MOV     ?V0 + 1,#(`?<Constant "  ">` >> 8) & 0xff
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   7C02         MOV     R4,#0x2
   \   000089   7D00         MOV     R5,#0x0
   \   00008B   740B         MOV     A,#0xb
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
    507            osal_memcpy(&strTemp[4], humidity, 3);
   \   000096                ; Setup parameters for call to function osal_memcpy
   \   000096   85..82       MOV     DPL,?XSP + 0
   \   000099   85..83       MOV     DPH,?XSP + 1
   \   00009C   A982         MOV     R1,DPL
   \   00009E   AA83         MOV     R2,DPH
   \   0000A0   89..         MOV     ?V0 + 0,R1
   \   0000A2   8A..         MOV     ?V0 + 1,R2
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A9   7C03         MOV     R4,#0x3
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   740D         MOV     A,#0xd
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
    508            
    509            //»ñµÃµÄÎÂÊª¶ÈÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾
    510            HalUARTWrite(0, "T&H:", 4);
   \   0000B8                ; Setup parameters for call to function HalUARTWrite
   \   0000B8   7C04         MOV     R4,#0x4
   \   0000BA   7D00         MOV     R5,#0x0
   \   0000BC   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   0000BE   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   0000C0   7900         MOV     R1,#0x0
   \   0000C2   12....       LCALL   ??HalUARTWrite?relay
    511            HalUARTWrite(0, (uint8 *)strTemp, 6);
   \   0000C5                ; Setup parameters for call to function HalUARTWrite
   \   0000C5   7C06         MOV     R4,#0x6
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   EC           MOV     A,R4
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   AA82         MOV     R2,DPL
   \   0000CF   AB83         MOV     R3,DPH
   \   0000D1   12....       LCALL   ?Subroutine2 & 0xFFFF
    512            HalUARTWrite(0, "\n",1);
    513            
    514            //Êä³öµ½LCDÏÔÊ¾
    515            Color    = BLACK;
   \                     ??CrossCallReturnLabel_1:
   \   0000D4   90....       MOV     DPTR,#Color
   \   0000D7   E4           CLR     A
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   F0           MOVX    @DPTR,A
    516            Color_BK = WHITE; //±³¾°É«  
   \   0000DB   90....       MOV     DPTR,#Color_BK
   \   0000DE   74FF         MOV     A,#-0x1
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   F0           MOVX    @DPTR,A
    517            LCD_write_CN_string(7, 80, "ÎÂ¶È£º");
   \   0000E3                ; Setup parameters for call to function LCD_write_CN_string
   \   0000E3   7C..         MOV     R4,#`?<Constant "\\316\\302\\266\\310\\243\\272">` & 0xff
   \   0000E5   7D..         MOV     R5,#(`?<Constant "\\316\\302\\266\\310\\243\\272">` >> 8) & 0xff
   \   0000E7   7A50         MOV     R2,#0x50
   \   0000E9   7907         MOV     R1,#0x7
   \   0000EB   12....       LCALL   ??LCD_write_CN_string?relay
    518            LCD_write_CN_string(7, 95, "Êª¶È£º");
   \   0000EE                ; Setup parameters for call to function LCD_write_CN_string
   \   0000EE   7C..         MOV     R4,#`?<Constant "\\312\\252\\266\\310\\243\\272">` & 0xff
   \   0000F0   7D..         MOV     R5,#(`?<Constant "\\312\\252\\266\\310\\243\\272">` >> 8) & 0xff
   \   0000F2   7A5F         MOV     R2,#0x5f
   \   0000F4   7907         MOV     R1,#0x7
   \   0000F6   12....       LCALL   ??LCD_write_CN_string?relay
    519            
    520            Color    = RED;
   \   0000F9   90....       MOV     DPTR,#Color
   \   0000FC   E4           CLR     A
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   74F8         MOV     A,#-0x8
   \   000101   F0           MOVX    @DPTR,A
    521            HalLcdWriteEnString( 49, 80, temp );                  
   \   000102                ; Setup parameters for call to function HalLcdWriteEnString
   \   000102   7403         MOV     A,#0x3
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   AC82         MOV     R4,DPL
   \   000109   AD83         MOV     R5,DPH
   \   00010B   7A50         MOV     R2,#0x50
   \   00010D   7931         MOV     R1,#0x31
   \   00010F   12....       LCALL   ??HalLcdWriteEnString?relay
    522            HalLcdWriteEnString( 49, 95, humidity );
   \   000112                ; Setup parameters for call to function HalLcdWriteEnString
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   AC82         MOV     R4,DPL
   \   00011A   AD83         MOV     R5,DPH
   \   00011C   7A5F         MOV     R2,#0x5f
   \   00011E   7931         MOV     R1,#0x31
   \   000120   12....       LCALL   ??HalLcdWriteEnString?relay
    523            
    524            Color    = BLACK; 
   \   000123   90....       MOV     DPTR,#Color
   \   000126   E4           CLR     A
   \   000127   F0           MOVX    @DPTR,A
   \   000128   A3           INC     DPTR
   \   000129   F0           MOVX    @DPTR,A
    525            LCD_write_CN_string(63, 80, "¡æ");
   \   00012A                ; Setup parameters for call to function LCD_write_CN_string
   \   00012A   7C..         MOV     R4,#`?<Constant "\\241\\346">` & 0xff
   \   00012C   7D..         MOV     R5,#(`?<Constant "\\241\\346">` >> 8) & 0xff
   \   00012E   7A50         MOV     R2,#0x50
   \   000130   793F         MOV     R1,#0x3f
   \   000132   12....       LCALL   ??LCD_write_CN_string?relay
    526            LCD_write_CN_string(63, 95, "£¥");
   \   000135                ; Setup parameters for call to function LCD_write_CN_string
   \   000135   7C..         MOV     R4,#`?<Constant "\\243\\245">` & 0xff
   \   000137   7D..         MOV     R5,#(`?<Constant "\\243\\245">` >> 8) & 0xff
   \   000139   7A5F         MOV     R2,#0x5f
   \   00013B   793F         MOV     R1,#0x3f
   \   00013D   12....       LCALL   ??LCD_write_CN_string?relay
    527          
    528           
    529            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    530                                 SAMPLEAPP_P2P_CLUSTERID,
    531                                 6,
    532                                 (uint8 *)strTemp,
    533                                 &SampleApp_TransID,
    534                                 AF_DISCV_ROUTE,
    535                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000140                ; Setup parameters for call to function AF_DataRequest
   \   000140   75..1E       MOV     ?V0 + 0,#0x1e
   \   000143   78..         MOV     R0,#?V0 + 0
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000148   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00014B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00014E   78..         MOV     R0,#?V0 + 0
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000153   7409         MOV     A,#0x9
   \   000155   12....       LCALL   ?XSTACK_DISP0_8
   \   000158   8582..       MOV     ?V0 + 0,DPL
   \   00015B   8583..       MOV     ?V0 + 1,DPH
   \   00015E   78..         MOV     R0,#?V0 + 0
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000163   75..06       MOV     ?V0 + 0,#0x6
   \   000166   75..00       MOV     ?V0 + 1,#0x0
   \   000169   78..         MOV     R0,#?V0 + 0
   \   00016B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016E   75..03       MOV     ?V0 + 0,#0x3
   \   000171   78..         MOV     R0,#?V0 + 0
   \   000173   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000176   7920         MOV     R1,#0x20
   \   000178   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00017A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00017C   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   00017E   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   000180   12....       LCALL   ??AF_DataRequest?relay
   \   000183   7409         MOV     A,#0x9
   \   000185   12....       LCALL   ?DEALLOC_XSTACK8
    536            {
    537            }
    538            else
    539            {
    540              // Error occurred in request to send.
    541            }
    542          }
   \   000188   740D         MOV     A,#0xd
   \   00018A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018D   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine6_0
   \   000004                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 DHT11"
   \            35333020
   \            44485431
   \            3100    

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T&H:">`:
   \   000000   5426483A     DB "T&H:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "  ">`:
   \   000000   202000       DB "  "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\316\\302\\266\\310\\243\\272">`:
   \   000000   CEC2B6C8     DB "\316\302\266\310\243\272"
   \            A3BA00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\312\\252\\266\\310\\243\\272">`:
   \   000000   CAAAB6C8     DB "\312\252\266\310\243\272"
   \            A3BA00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\241\\346">`:
   \   000000   A1E600       DB "\241\346"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\243\\245">`:
   \   000000   A3A500       DB "\243\245"
    543          /*********************************************************************
    544          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         1      0     45
       -> DHT11                         0      0     48
       -> osal_memcpy                   0      0     54
       -> osal_memcpy                   0      0     54
       -> osal_memcpy                   0      0     54
       -> HalUARTWrite                  0      0     48
       -> HalUARTWrite                  0      0     48
       -> HalUARTWrite                  0      0     48
       -> LCD_write_CN_string           0      0     48
       -> LCD_write_CN_string           0      0     48
       -> HalLcdWriteEnString           0      0     48
       -> HalLcdWriteEnString           0      0     48
       -> LCD_write_CN_string           0      0     48
       -> LCD_write_CN_string           0      0     48
       -> AF_DataRequest                0      0     66


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     P0SEL                                     1
     AppTitle                                 14
     SampleApp_ClusterList                     6
     SampleApp_SimpleDesc                     12
     SampleApp_epDesc                          6
     SampleApp_TaskID                          1
     SampleApp_NwkState                        1
     SampleApp_TransID                         1
     SampleApp_Periodic_DstAddr               12
     SampleApp_Flash_DstAddr                  12
     SampleApp_P2P_DstAddr                    12
     SampleApp_Group                          18
     SampleAppPeriodicCounter                  1
     SampleAppFlashCounter                     1
     SampleApp_Init                          181
     ?Subroutine0                              5
     ??Subroutine6_0                           6
     SampleApp_ProcessEvent                  176
     SampleApp_HandleKeys                     61
     ??Subroutine5_0                           5
     SampleApp_MessageMSGCB                  132
     ?Subroutine3                             12
     ?Subroutine2                             19
     ?Subroutine1                              3
     SampleApp_SendPeriodicMessage            69
     SampleApp_SendFlashMessage              118
     SampleApp_Send_P2P_Message              400
     ?Subroutine4                              4
     ?<Initializer for AppTitle>              14
     ??SampleApp_Init?relay                    6
     ??SampleApp_ProcessEvent?relay            6
     ??SampleApp_HandleKeys?relay              6
     ??SampleApp_MessageMSGCB?relay            6
     ??SampleApp_SendPeriodicMessage?relay     6
     ??SampleApp_SendFlashMessage?relay        6
     ??SampleApp_Send_P2P_Message?relay        6
     ?<Constant "Group 1">                     8
     ?<Constant "SampleApp">                  10
     ?<Constant "T&H:">                        5
     ?<Constant "\n">                          2
     ?<Constant "  ">                          3
     ?<Constant "\316\302\266\310\243\272">    7
     ?<Constant "\312\252\266\310\243\272">    7
     ?<Constant "\241\346">                    3
     ?<Constant "\243\245">                    3

 
 1 191 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
    66 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 247 bytes of CODE  memory
    66 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    79 bytes of XDATA memory

Errors: none
Warnings: none
